{
	"info": {
		"_postman_id": "b5dfad98-7a05-4608-99f2-0227ebd91572",
		"name": "HW_2_Group_29",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"// 4. Спарсить request.",
							"let req = pm.request.url.query.toObject();",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let req_name = req.name; //приравниваем к переменной значение .name",
							"let resp_name = jsonData.name;",
							"pm.test(\"name_request\", function () {",
							"    pm.expect(req_name).to.eql(resp_name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"let req_age = req.age;",
							"let resp_age = jsonData.age;",
							"pm.test(\"age_request\", function () {",
							"    pm.expect(req_age).to.eql(resp_age);",
							"});",
							"",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"let req_salary = req.salary;",
							"let resp_salary = jsonData.salary;",
							"pm.test(\"salary_request\", function () {",
							" pm.expect(Number(req_salary)).to.eql(resp_salary);//преобразуем данные req_salary в тип число",
							"});",
							"",
							"// 8. Вывести в консоль параметр family из response.",
							"console.log(jsonData.family);",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Dog_name\", function () {",
							"  pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");",
							"});",
							"",
							"//10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Dog_age\", function () {",
							"  pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");",
							"});",
							"",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"name-Luky\", function () {",
							"pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"",
							"//12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"age_4\", function () {",
							"pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}{{port}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}{{port}}"
					],
					"path": [
						"",
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"let req = pm.request.url.query.toObject();",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let req_name = req.name; //приравниваем к переменной значение .name",
							"let resp_name = jsonData.name;",
							"pm.test(\"name_request\", function () {",
							"    pm.expect(req_name).to.eql(resp_name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"let req_age = req.age;",
							"let resp_age = jsonData.age;",
							"console.log(req_age);",
							"console.log(resp_age);",
							"pm.test(\"age_request\", function () {",
							"    pm.expect(+req_age).to.eql(resp_age);",
							"});",
							"",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log(req.salary);",
							"",
							"// 8. Вывести в консоль параметр salary из response.",
							"console.log(jsonData.salary);",
							"",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(jsonData.salary[0]);",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(jsonData.salary[1]);",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(jsonData.salary[2]);",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"let req_salary_0 = req.salary;",
							"let resp_salary_0  = jsonData.salary[0];",
							"pm.test(\"salary_0\", function () {",
							"    pm.expect(resp_salary_0).to.eql(+req_salary_0);",
							"});",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"let req_salary0 = req.salary;",
							"let req_salary1 = Number(req_salary0) * 2;",
							"let resp_salary0  = jsonData.salary[1];",
							"console.log(req_salary1); //4000",
							"console.log(resp_salary0);//\"4000\"",
							"pm.test(\"salary_1\", function () {",
							"    pm.expect(+resp_salary0).to.eql(req_salary1);",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"let req_salary2 = req.salary;",
							"let req_salary3 = Number(req_salary2) * 3;",
							"let resp_salary4  = jsonData.salary[2];",
							"console.log(req_salary3); ",
							"console.log(resp_salary4);",
							"pm.test(\"salary_2\", function () {",
							"    pm.expect(+resp_salary4).to.eql(req_salary3);",
							"});",
							"",
							"// 18. Передать в окружение переменную name",
							"let user_name = jsonData.name;",
							"pm.environment.set(\"name\", user_name);",
							"",
							"// 19. Передать в окружение переменную age",
							"let user_age = jsonData.age;",
							"pm.environment.set(\"age\", user_age);",
							"",
							"// // 20. Передать в окружение переменную salary",
							"let user_salary = jsonData.salary[0];",
							"console.log(user_salary);",
							"pm.environment.set(\"salary\", user_salary);",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"let arraySalary = jsonData.salary;",
							"arraySalary.forEach(salary => console.log(salary));",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}{{port}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}{{port}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Проверить, что в body приходит правильный string.",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"name\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Nina\");",
							"});",
							"",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"age\", function () {",
							"    pm.expect(jsonData.age).to.eql(\"29\");",
							"});",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"salary\", function () {",
							"    pm.expect(jsonData.salary).to.eql(2000);",
							"});",
							"// 7. Спарсить request.",
							"let req = request.data; //без JSON.parse, тк уже тип объект",
							"console.log(\"req = \", req);",
							"console.log(\"typofReq = \", typeof req);//проверка типа запроса",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let req_name = req.name; //приравниваем к переменной значение .name",
							"let resp_name = jsonData.name;",
							"pm.test(\"name_request\", function () {",
							"    pm.expect(req_name).to.eql(resp_name);",
							"});",
							"",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"let req_age = req.age;",
							"let resp_age = jsonData.age;",
							"pm.test(\"age_request\", function () {",
							"    pm.expect(req_age).to.eql(resp_age);",
							"});",
							"",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"let req_salary = req.salary;",
							"let resp_salary = jsonData.salary;",
							"console.log(req_salary);",
							"console.log(resp_salary);",
							"pm.test(\"salary_request\", function () {",
							" pm.expect(Number(req_salary)).to.eql(resp_salary);//преобразуем данные req_salary в тип число",
							"});",
							"// 11. Вывести в консоль параметр family из response.",
							"console.log(jsonData.family);",
							"",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"let req_u_salary_1_5_year = req.salary * 4;",
							"let resp_u_salary_1_5_year = jsonData.family.u_salary_1_5_year;",
							"console.log(req_u_salary_1_5_year);",
							"console.log(resp_u_salary_1_5_year);",
							"pm.test(\"u_salary_1_5_year\", function () {",
							"    pm.expect(req_u_salary_1_5_year).to.eql(resp_u_salary_1_5_year);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}{{port}}/user_info_3",
					"host": [
						"{{url}}{{port}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 6. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"// 7. Спарсить request.",
							"let req = request.data;",
							"",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"json_response_start_qa_salary\", function () {",
							"  pm.expect(jsonData).to.have.property(\"start_qa_salary\");",
							"});",
							"",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"json_response_qa_salary_after_6_months\", function () {",
							"  pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"json_response_qa_salary_after_12_months\", function () {",
							"  pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"json_response_qa_salary_after_1.5_year\", function () {",
							"  pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"json_response_qa_salary_after_3.5_years\", function () {",
							"  pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"json_response_person\", function () {",
							"  pm.expect(jsonData).to.have.property(\"person\");",
							"});",
							"",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"json_response_start_qa_salary\", function () {",
							"  pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);",
							"});",
							"",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"",
							"pm.test(\"json_response_qa_salary_after_6_months\", function () {",
							"  pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.salary * 2);",
							"});",
							"",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"json_response_qa_salary_after_12_months\", function () {",
							"  pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.salary * 2.7);",
							"});",
							"",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"json_response_qa_salary_after_1.5_year\", function () {",
							"  pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+req.salary * 3.3);",
							"});",
							"",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"json_response_qa_salary_after_3.5_years\", function () {",
							"  pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+req.salary * 3.8);",
							"});",
							"",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"json_response_person_name\", function () {",
							"  pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);",
							"});",
							"",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"json_response_person_age\", function () {",
							"  pm.expect(jsonData.person.u_age).to.eql(+req.age);",
							"});",
							"",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"json_response_u_salary_5_years\", function () {",
							"  pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.salary * 4.2);",
							"});",
							"",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"",
							"let person = jsonData.person",
							"",
							"",
							"Object.keys(person).forEach(key => {",
							"    console.log(key , person[key]) // key , value",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}{{port}}/user_info_2?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}{{port}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	]
}