{
	"info": {
		"_postman_id": "086954a8-fa51-4d90-81fe-c950b423f835",
		"name": "HW_3_Anatol",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user_info_2_TC_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// // 5. Статус код 200",
							"// pm.test(\"Status code is 200\", function () {",
							"//     pm.response.to.have.status(200);",
							"// });",
							"// // 6. Спарсить response body в json.",
							"// let jsonData = pm.response.json();",
							"",
							"// // 7. Спарсить request.",
							"// let req = request.data;",
							"",
							"// // 8. Проверить, что json response имеет параметр start_qa_salary",
							"// pm.test(\"json_response_start_qa_salary\", function () {",
							"//   pm.expect(jsonData).to.have.property(\"start_qa_salary\");",
							"// });",
							"",
							"// // 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"// pm.test(\"json_response_qa_salary_after_6_months\", function () {",
							"//   pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");",
							"// });",
							"",
							"// // 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"// pm.test(\"json_response_qa_salary_after_12_months\", function () {",
							"//   pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");",
							"// });",
							"",
							"// // 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"// pm.test(\"json_response_qa_salary_after_1.5_year\", function () {",
							"//   pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");",
							"// });",
							"// // 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"// pm.test(\"json_response_qa_salary_after_3.5_years\", function () {",
							"//   pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");",
							"// });",
							"",
							"// // 13. Проверить, что json response имеет параметр person",
							"// pm.test(\"json_response_person\", function () {",
							"//   pm.expect(jsonData).to.have.property(\"person\");",
							"// });",
							"",
							"// // 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"",
							"// pm.test(\"json_response_start_qa_salary\", function () {",
							"//   pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);",
							"// });",
							"",
							"// // 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"",
							"// pm.test(\"json_response_qa_salary_after_6_months\", function () {",
							"//   pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.salary * 2);",
							"// });",
							"",
							"// // 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"// pm.test(\"json_response_qa_salary_after_12_months\", function () {",
							"//   pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.salary * 2.7);",
							"// });",
							"",
							"// // 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"// pm.test(\"json_response_qa_salary_after_1.5_year\", function () {",
							"//   pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+req.salary * 3.3);",
							"// });",
							"",
							"// // 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"// pm.test(\"json_response_qa_salary_after_3.5_years\", function () {",
							"//   pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+req.salary * 3.8);",
							"// });",
							"",
							"// // 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"// pm.test(\"json_response_person_name\", function () {",
							"//   pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);",
							"// });",
							"",
							"// // 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"// pm.test(\"json_response_person_age\", function () {",
							"//   pm.expect(jsonData.person.u_age).to.eql(+req.age);",
							"// });",
							"",
							"// // 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"// pm.test(\"json_response_u_salary_5_years\", function () {",
							"//   pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.salary * 4.2);",
							"// });",
							"",
							"// // 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"",
							"// let person = jsonData.person",
							"// Object.keys(person).forEach(key => {",
							"//     console.log(key , person[key]) // key , value",
							"// })",
							"// проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). ",
							"// P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!",
							"// Требования:",
							"// 1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное",
							"// 2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное",
							"// 3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное",
							"",
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.",
							"",
							"let req = request.data;",
							"let name = req.name;",
							"let age = +req.age;",
							"let salary =  +req.salary;",
							"",
							"",
							"function validAge (age) {",
							"    if ((age >= 18 && age <= 120) && Number.isInteger(age)) {",
							"        return true",
							"    }",
							"}",
							"",
							"function validName (name) {",
							"   if ((name.length >= 3 && name.length <= 40) && (!((name.startsWith(\" \") || (name.endsWith(\" \")))))) {",
							"        return true",
							"    }        ",
							"}",
							"",
							"function validSalary (salary) {",
							"    if ((salary >= 1 && salary <= 1000000) && Number.isInteger(salary)) {",
							"        return true",
							"    }",
							"}",
							"",
							"if (validName(name) && validAge(age) && validSalary(salary)) {",
							"",
							"pm.test(`Status code is 200 name = \"${req.name}\", age = \"${req.age}\", salary = \"${req.salary}\"`, ",
							"function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"}   ",
							"//проверка статус НЕ 200  ",
							"else { ",
							"     pm.test(`Status code is NOT 200 name = \"${req.name}\", age = \"${req.age}\", salary = \"${req.salary}\"`, ",
							"     function () {",
							"     pm.response.to.not.have.status(200); ",
							"     });",
							"     }",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}{{port}}/user_info_2",
					"host": [
						"{{url}}{{port}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4 TC_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"let req_salary_0 = req.salary;",
							"let resp_salary_0  = jsonData.salary[0];",
							"pm.test(\"salary_0\", function () {",
							"    pm.expect(resp_salary_0).to.eql(+req_salary_0);",
							"});",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"let req_salary0 = req.salary;",
							"let req_salary1 = Number(req_salary0) * 2;",
							"let resp_salary0  = jsonData.salary[1];",
							"console.log(req_salary1); //4000",
							"console.log(resp_salary0);//\"4000\"",
							"pm.test(\"salary_1\", function () {",
							"    pm.expect(+resp_salary0).to.eql(req_salary1);",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"let req_salary2 = req.salary;",
							"let req_salary3 = Number(req_salary2) * 3;",
							"let resp_salary4  = jsonData.salary[2];",
							"console.log(req_salary3); ",
							"console.log(resp_salary4);",
							"pm.test(\"salary_2\", function () {",
							"    pm.expect(+resp_salary4).to.eql(req_salary3);",
							"});",
							"//  Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary",
							"",
							"let jsonData = pm.response.json();",
							"let req = pm.request.url.query.toObject();",
							"for(i = 0; i < jsonData.salary.length; i++){",
							"   pm.test(`Test for salary \"${+jsonData.salary[i]} and ${req.salary * (i + 1)}\"`, function () {",
							"     pm.expect(+jsonData.salary[i]).to.eql(+req.salary * (i + 1));",
							"",
							" }); ",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}{{port}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}{{port}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3_ТС_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// //Статус код 200",
							"// pm.test(\"Status code is 200\", function () {",
							"//     pm.response.to.have.status(200);",
							"// });",
							"",
							"// //Спарсить response body в json.",
							"// let jsonData = pm.response.json();",
							"",
							"// // 4. Спарсить request.",
							"// let req = pm.request.url.query.toObject();",
							"",
							"// // 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"// let req_name = req.name; //приравниваем к переменной значение .name",
							"// let resp_name = jsonData.name;",
							"// pm.test(\"name_request\", function () {",
							"//     pm.expect(req_name).to.eql(resp_name);",
							"// });",
							"",
							"// // 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"// let req_age = req.age;",
							"// let resp_age = jsonData.age;",
							"// pm.test(\"age_request\", function () {",
							"//     pm.expect(req_age).to.eql(resp_age);",
							"// });",
							"",
							"// // 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"// let req_salary = req.salary;",
							"// let resp_salary = jsonData.salary;",
							"// pm.test(\"salary_request\", function () {",
							"//  pm.expect(Number(req_salary)).to.eql(resp_salary);//преобразуем данные req_salary в тип число",
							"// });",
							"",
							"// // 8. Вывести в консоль параметр family из response.",
							"// console.log(jsonData.family);",
							"",
							"// // 9. Проверить, что у параметра dog есть параметры name.",
							"// pm.test(\"Dog_name\", function () {",
							"//   pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");",
							"// });",
							"",
							"// //10. Проверить, что у параметра dog есть параметры age.",
							"// pm.test(\"Dog_age\", function () {",
							"//   pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");",
							"// });",
							"",
							"// // 11. Проверить, что параметр name имеет значение Luky.",
							"// pm.test(\"name-Luky\", function () {",
							"// pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");",
							"// });",
							"",
							"// //12. Проверить, что параметр age имеет значение 4.",
							"// pm.test(\"age_4\", function () {",
							"// pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"// });",
							"",
							"//  Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)",
							"let jsonData = pm.response.json(); //ответ",
							"let req = pm.request.url.query.toObject();//запрос",
							"",
							"let Obj = {};",
							"for(const key in req) {",
							"Obj[key] = jsonData[key]",
							"};",
							"",
							"req.salary = +req.salary;",
							"pm.test(`Test \"${req.name}\", \"${req.age}\", \"${req.salary}\"`, ",
							"function () {",
							" pm.expect(req).to.deep.equal(Obj);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}{{port}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}{{port}}"
					],
					"path": [
						"",
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	]
}